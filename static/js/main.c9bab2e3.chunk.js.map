{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAdded","useState","setQuery","searchedMovie","setSearchedMovie","isError","setIsError","isLoading","setIsLoading","createMovie","response","Poster","Title","Plot","imdbID","handleFindMovie","a","loadMovie","setTimeout","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","App","setMovies","newMovie","find","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9bab2e3.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">\n              {title}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=af98147';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  onAdded: (newMovie: Movie) => void\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAdded }) => {\n  const [query, setQuery] = useState('');\n  const [searchedMovie, setSearchedMovie] = useState<Movie | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const createMovie = (response: MovieData) => {\n    const {\n      Poster, Title, Plot, imdbID,\n    } = response;\n\n    return {\n      title: Title,\n      description: Plot,\n      imgUrl: Poster === 'N/A'\n        ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n        : Poster,\n      imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n      imdbId: imdbID,\n    };\n  };\n\n  const handleFindMovie = async () => {\n    setIsLoading(true);\n\n    try {\n      const loadMovie = await getMovie(query);\n\n      if ('Error' in loadMovie) {\n        throw new Error('Movie not found');\n      } else {\n        setSearchedMovie(createMovie(loadMovie));\n      }\n    } catch (error) {\n      setIsError(true);\n\n      setTimeout(() => {\n        setIsError(false);\n      }, 2000);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddMovie = (newMovie: Movie) => {\n    onAdded(newMovie);\n    setSearchedMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          handleFindMovie();\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(\n                'input',\n                { 'is-danger': isError },\n              )}\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {searchedMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddMovie(searchedMovie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      {searchedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={searchedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleAddMovie = (newMovie: Movie) => {\n    const searchedMovie = movies\n      .find(movie => movie.imdbId === newMovie.imdbId);\n\n    if (!searchedMovie) {\n      setMovies(current => [...current, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          onAdded={handleAddMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}